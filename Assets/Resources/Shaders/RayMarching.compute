// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

Texture2D<float4> Source;
RWTexture2D<float4> Result;
Texture2D<half> _DepthTex;
RWTexture2D<half> _SmokeMaskTex;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float3 _LightColor;
float3 _Light;
float _LightIntensity;

float3 _Radius;
float3 _SmokeOrigin;
float _DensityFalloff;

RWStructuredBuffer<int> _SmokeVoxels;
float3 _BoundsExtent;
float3 _VoxelResolution;

float4x4 _CameraInvViewProjection;
SamplerState linear_clamp_sampler;

float sigmaA;
float sigmaS;
int useLight;
int phaseType;
float g;
float globalDensity;

int _StepCount;
int _LightStepCount;

float3 _SmokeColor, _ExtinctionColor;
float _VolumeDensity, _ShadowDensity;
float _StepSize, _LightStepSize;
float _ScatteringCoefficient;
float _AlphaThreshold;

static const float maxDst = 80;
static const float epsilon = 0.001f;

struct Shape {
    
    float3 position;
    float3 size;
    float3 color;
    float3 colliderMin;
    float3 colliderMax;
    int shapeType;
    int phaseType;
    float sigmaA;
    float sigmaS;
    float featheringStrength;
    float g;
    int useLight;
    int useForwardRaymarching;
};

struct ShapeInfo {
    Shape shape;
    float distToShape;
};

StructuredBuffer<Shape> shapes;
int numShapes;

struct Ray {
    float3 origin;
    float3 direction;
};

float NormalDistribution(float2 rand2)
{
    float u1 = max(rand2.x, 1e-6);
    float u2 = rand2.y;

    float z0 = sqrt(-2.0 * log(u1)) * cos(2.0 * 3.14159265 * u2);
    float result = saturate((z0 + 3.0) / 6.0);

    return result;
}


Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}


Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin,direction);
}

bool RaySphereIntersection(float3 rayOrigin, float3 rayDir, float3 sphereCenter, float sphereRadius, out float tEnter, out float tExit)
{
    float3 oc = rayOrigin - sphereCenter;

    float a = dot(rayDir, rayDir); // usually 1 if rayDir is normalized
    float b = 2.0 * dot(oc, rayDir);
    float c = dot(oc, oc) - sphereRadius * sphereRadius;

    float discriminant = b * b - 4.0 * a * c;

    if (discriminant < 0.0)
    {
        tEnter = 0.0;
        tExit = 0.0;
        return false; // no intersection
    }

    float sqrtDisc = sqrt(discriminant);
    float invDenom = 0.5 / a;

    float t0 = (-b - sqrtDisc) * invDenom;
    float t1 = (-b + sqrtDisc) * invDenom;

    tEnter = min(t0, t1);
    tExit = max(t0, t1);

    return tExit >= max(tEnter, 0.0);
}


bool RayBoxIntersection(Shape shape, float3 rayOrigin, float3 rayDir, out float tEnter, out float tExit)
{
    float3 invDir = 1.0 / rayDir;

    float3 t0s = (shape.colliderMin - rayOrigin) * invDir;
    float3 t1s = (shape.colliderMax - rayOrigin) * invDir;

    float3 tSmalls = min(t0s, t1s);
    float3 tBigs = max(t0s, t1s);

    tEnter = max(max(tSmalls.x, tSmalls.y), tSmalls.z);
    tExit = min(min(tBigs.x, tBigs.y), tBigs.z);

    return tExit >= max(tEnter, 0.0);
}

bool RayShapeIntersection(Shape shape, float3 rayOrigin, float3 rayDir, out float tEnter, out float tExit) 
{
    if(shape.shapeType == 0) 
    {
        return RaySphereIntersection(rayOrigin, rayDir, shape.position, shape.size.y, tEnter, tExit);
    }
    if(shape.shapeType == 1) 
    {
        return RayBoxIntersection(shape, rayOrigin, rayDir, tEnter, tExit);    
    }
    return false;
}

float sdBox(float3 p, float3 b)
{
    float3 q = abs(p) - b;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float sdSphere(float3 rayPos, float s )
{
    return length(rayPos) - s;
}

float getShapeDistance(float3 eye, Shape shape) 
{
    if(shape.shapeType == 0) 
    {
        return sdSphere(eye - shape.position, shape.size.y);    
    }
    if(shape.shapeType == 1) 
    {
        return sdBox(eye - shape.position ,shape.size);    
    }
    return maxDst;
}


ShapeInfo SceneInfo(float3 eye) {
    ShapeInfo info;
    float globalDst = maxDst;
    Shape shape;
    for (int i = 0; i < numShapes; i++) 
    {
        float distToShape = getShapeDistance(eye, shapes[i]);
        if(globalDst > distToShape) 
        {
            globalDst = distToShape;
            shape = shapes[i];
        }
    }
    if (globalDst > maxDst)
    {
        globalDst = maxDst;
    }
    if (globalDst < epsilon)
    {
        globalDst = epsilon;
    }
    info.shape = shape;
    info.distToShape = globalDst;
    return info;
}

float IsotropicPhase()
{
    return 1.0 / (4.0 * 3.14159265);
}

float HenyeyGreenstein(float3 viewDir, float3 lightDir, float g)
{
    viewDir = normalize(viewDir);
    lightDir = normalize(lightDir);

    float cosTheta = dot(viewDir, lightDir);
    float g2 = g * g;

    float denom = 1.0 + g2 - 2.0 * g * cosTheta;
    denom = max(denom, 1e-4);

    float phase = (1.0 - g2) / (4.0 * 3.14159265 * pow(denom, 1.5));
    return phase;
}

float GetPhase(float3 viewDir, float3 lightDir, Shape shape)
{
    if (shape.phaseType == 0)
    {
        return IsotropicPhase();
    }
    if (shape.phaseType == 1)
    {
        return HenyeyGreenstein(viewDir, lightDir, shape.g);
    }
    return 1;
}

float GetPhase(float3 viewDir, float3 lightDir)
{
    if (phaseType == 0)
    {
        return IsotropicPhase();
    }
    if (phaseType == 1)
    {
        return HenyeyGreenstein(viewDir, lightDir, g);
    }
    return 1;
}


float hash(float3 p)
{
    p = frac(p * 0.3183099 + 0.1);
    p *= 17.0;
    return frac(p.x * p.y * p.z * (p.x + p.y + p.z));
}

float perlin(float3 p, float scale)
{
    p *= scale;
    float3 i = floor(p);
    float3 f = frac(p);

    // Smoothstep interpolation
    float3 u = f * f * (3.0 - 2.0 * f);

    // Hash the corners of the cube
    float n000 = hash(i + float3(0.0, 0.0, 0.0));
    float n001 = hash(i + float3(0.0, 0.0, 1.0));
    float n010 = hash(i + float3(0.0, 1.0, 0.0));
    float n011 = hash(i + float3(0.0, 1.0, 1.0));
    float n100 = hash(i + float3(1.0, 0.0, 0.0));
    float n101 = hash(i + float3(1.0, 0.0, 1.0));
    float n110 = hash(i + float3(1.0, 1.0, 0.0));
    float n111 = hash(i + float3(1.0, 1.0, 1.0));

    // Trilinear interpolation
    return lerp(
        lerp(lerp(n000, n100, u.x), lerp(n010, n110, u.x), u.y),
        lerp(lerp(n001, n101, u.x), lerp(n011, n111, u.x), u.y),
        u.z
    );
}

float worley(float3 p, float scale)
{
    float3 id = floor(p);
    float3 fd = frac(p);

    float minimalDist = 1.;

    for (float x = -1.; x <= 1.; x++)
    {
        for (float y = -1.; y <= 1.; y++)
        {
            for (float z = -1.; z <= 1.; z++)
            {

                float3 coord = float3(x, y, z);
                float3 rId = hash(id + coord) * 0.5 + 0.5;

                float3 r = coord + rId - fd;

                float d = dot(r, r);

                if (d < minimalDist)
                {
                    minimalDist = d;
                }

            } //z
        } //y
    } //x
    
    return 1.0 - minimalDist;
}

float getNoise(float3 pos) {
    float noise = perlin(pos, 2.0) * worley(pos, 1.0);
    return saturate(noise);
}


float feather(float3 pos, Shape shape, float featherStrength)
{
    float distCenter;
    if (shape.shapeType == 1)
        distCenter = max(max(length(shape.position.x - pos.x), length(shape.position.y - pos.y)), length(shape.position.z - pos.z)); //distance to center for square
    else
        distCenter = abs(length(pos - shape.position)); // generic distance to center (spherical)
    
    float distCenterNormalized = distCenter / shape.size; // normalizes to 0-1 range
    float featherValue = pow(-distCenterNormalized + 1, featherStrength); // maps 0-1 range to a smooth feathering function
    featherValue *= shape.size; // returning to original scale
    
    return featherValue;
}

uint to1D(uint3 pos) {
    return pos.x + pos.y * _VoxelResolution.x + pos.z * _VoxelResolution.x * _VoxelResolution.y;
}

int getVoxel(float3 pos) {
    int v = 0;
    pos.y -= _BoundsExtent.y;

    if (abs(dot(pos, float3(1, 0, 0))) <= _BoundsExtent.x &&
        abs(dot(pos, float3(0, 1, 0))) <= _BoundsExtent.y &&
        abs(dot(pos, float3(0, 0, 1))) <= _BoundsExtent.z)
    {
        pos.y += _BoundsExtent.y;
        float3 seedPos = pos;
        seedPos.xz += _BoundsExtent.xz;
        seedPos /= _BoundsExtent * 2;
        seedPos *= _VoxelResolution;

        v = _SmokeVoxels[to1D(seedPos)];
    }

    return v;
}

float getTrilinearVoxel(float3 pos) {
    float v = 0;
    pos.y -= _BoundsExtent.y;

    if (abs(dot(pos, float3(1, 0, 0))) <= _BoundsExtent.x &&
        abs(dot(pos, float3(0, 1, 0))) <= _BoundsExtent.y &&
        abs(dot(pos, float3(0, 0, 1))) <= _BoundsExtent.z)
    {
        pos.y += _BoundsExtent.y;
        float3 seedPos = pos;
        seedPos.xz += _BoundsExtent.xz;
        seedPos /= _BoundsExtent * 2;
        seedPos *= _VoxelResolution;
        seedPos -= 0.5f;

        uint3 vi = floor(seedPos);

        float weight1 = 0.0f;
        float weight2 = 0.0f;
        float weight3 = 0.0f;
        float value = 0.0f;

        for (int i = 0; i < 2; ++i) {
            weight1 = 1 - min(abs(seedPos.x - (vi.x + i)), _VoxelResolution.x);
            for (int j = 0; j < 2; ++j) {
                weight2 = 1 - min(abs(seedPos.y - (vi.y + j)), _VoxelResolution.y);
                for (int k = 0; k < 2; ++k) {
                    weight3 = 1 - min(abs(seedPos.z - (vi.z + k)), _VoxelResolution.z);
                    value += weight1 * weight2 * weight3 * (float)_SmokeVoxels[to1D(vi + uint3(i, j, k))];
                }
            }
        }

        v = value;
    }
    return v;
}

float getDensity(float3 pos) {
    float v = 0;
    float n = 0.0f;
    float falloff = 0.0f;
    float heightMod = 0.0f;

    float3 vp = pos - _SmokeOrigin;
    float3 radius = _Radius - 0.1f;

    v = getTrilinearVoxel(pos);

    n = getNoise(pos);

    float dist = min(1.0f, length(vp / radius));
    float voxelDist = min(1.0f, 1 - (v / 16.0f));
    dist = max(dist, voxelDist);

    dist = smoothstep(_DensityFalloff, 1.0f, dist);

    falloff = min(1.0f, dist + n);

    return saturate(saturate(v) * (1 - falloff));
}

float4 BackwardRaymarching(Ray ray, ShapeInfo info, float tEnter, float tExit)
{
    int d = 2;
    float t = 0;
    float3 color = float3(0, 0, 0);
    float stepSize = (tExit - tEnter) / 100.0; // Adjust number of steps as needed
    float transmission = 1;

    for (int i = 0; i < 100; i++) // Adjust max iterations as needed
    {
        float rand = NormalDistribution(float2(0,1));
        t = tExit - (i + rand) * stepSize;
                    
        if (t < tEnter) break;
                    
        float3 pos = ray.origin + ray.direction * t;
        float density = exp(-stepSize * globalDensity * (info.shape.sigmaA + info.shape.sigmaS));
        float noise = feather(pos, info.shape, info.shape.featheringStrength) * pow(perlin(pos, 2), 2) * pow(worley(pos, 1), 2);
        density *= noise;

        if (density > 0.01) // Adjust threshold as needed
        {
            float3 lightDirection = normalize(_Light - pos);
            float tLavaEnter, tLavaExit = 0;
            RayShapeIntersection(info.shape, pos, lightDirection, tLavaEnter, tLavaExit);
            float lightAttenuation = exp(-tLavaExit * globalDensity * (info.shape.sigmaA + info.shape.sigmaS));
            float3 Li_x = GetPhase(ray.direction, lightDirection, info.shape) * lightAttenuation * globalDensity * info.shape.sigmaS * _LightColor * stepSize * _LightIntensity; 

            transmission = transmission * density;
            if (info.shape.useLight == 1)
            {
                color = (color + Li_x) * density;
            }
            else
            {
                color = color * density;
            }
                        
            // Early ray termination
            if (transmission <= 1e-3)
            {
                if (NormalDistribution(float2(0,1)) > 1.f / d)
                {
                    break;
                }
                transmission *= d;
            }
        }
    }
    return float4(color, transmission);
}

float4 ForwardRaymarching(Ray ray, ShapeInfo info, float tEnter, float tExit)
{
    int d = 2;
    float t = 0;
    float3 color = float3(0, 0, 0);
    float stepSize = (tExit - tEnter) / 100.0; // Adjust number of steps as needed
    float transmission = 1;

    for (int i = 0; i < 100; i++) // Adjust max iterations as needed
    {
        float rand = NormalDistribution(float2(0,1));
        t = tEnter + (i + rand) * stepSize;
                    
        if (t >= tExit) break;
                    
        float3 pos = ray.origin + ray.direction * t;
        float density = exp(-stepSize * globalDensity * (info.shape.sigmaA + info.shape.sigmaS));
        float noise = feather(pos, info.shape, info.shape.featheringStrength) * pow(perlin(pos, 2), 2) * pow(worley(pos, 1), 2);
        density *= noise;
        
        if (density > 0.01) // Adjust threshold as needed
        {
            float3 lightDirection = normalize(_Light - pos);
            float tLavaEnter, tLavaExit = 0;
            RayShapeIntersection(info.shape, pos, lightDirection, tLavaEnter, tLavaExit);
            float lightAttenuation = exp(-tLavaExit * globalDensity * (info.shape.sigmaA + info.shape.sigmaS));
            float3 Li_x = GetPhase(ray.direction, lightDirection, info.shape) * lightAttenuation * globalDensity * info.shape.sigmaS * _LightColor * stepSize * _LightIntensity; 

            transmission = transmission * density;
            if (info.shape.useLight == 1)
            {
                color = color + Li_x * density;
            }
            else
            {
                color = color * density;
            }
                        
            // Early ray termination
            if (transmission <= 1e-3)
            {
                if (NormalDistribution(float2(0,1)) > 1.f / d)
                {
                    break;
                }
                transmission *= d;
            }
        }
    }
    return float4(color, transmission);
}

float4 ForwardRaymarching(Ray ray, float tEnter, float tExit)
{
    int d = 2;
    float3 color = float3(0, 0, 0);
    float stepSize = (tExit - tEnter) / 100.0;
    float distanceTravelled = tEnter;
    float transmission = 1;
    int stepCount = 0;
    //float sceneIntersectDistance = -((ray.origin - tExit) / ray.direction).x;
    float sceneIntersectDistance = tExit - ray.origin;
    //sceneIntersectDistance = 1000;
    while (stepCount <= _StepCount && distanceTravelled < sceneIntersectDistance)
    {
        //distanceTravelled += stepSize;
        distanceTravelled += 0.05;
        float3 pos = ray.origin + ray.direction * distanceTravelled;
        float density = exp(-stepSize * globalDensity * (sigmaA + sigmaS));
        if (density > 0.01) 
        {
            float3 lightDirection = normalize(_Light - pos);
            //TODO: get t light exit distance
            float tLavaExit = 0;
            stepCount++;
            
            float lightAttenuation = exp(-tLavaExit * globalDensity * (sigmaA + sigmaS));
            float3 Li_x = GetPhase(ray.direction, lightDirection) * lightAttenuation * globalDensity * sigmaS * _LightColor * stepSize * _LightIntensity; 

            transmission = transmission * density;
            if (useLight == 1)
            {
                color = color + Li_x * density;
            }
            else
            {
                color = color * density;
            }
            // Early ray termination
            if (transmission <= 1e-3)
            {
                if (NormalDistribution(float2(0,1)) > 1.f / d)
                {
                    break;
                }
                transmission *= d;
            }
        }
    }
    return float4(color, transmission);
}

float3 ComputeWorldSpacePosition(float2 positionNDC, float deviceDepth) {
    float4 positionCS = float4(positionNDC * 2.0 - 1.0, deviceDepth, 1.0);
    float4 hpositionWS = mul(_CameraInvViewProjection, positionCS);
    return hpositionWS.xyz / hpositionWS.w;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = Source[id.xy];
    
    uint width,height;
    Result.GetDimensions(width, height);
    float2 uv = id.xy / float2(width, height);
    float sceneDepth = _DepthTex.SampleLevel(linear_clamp_sampler, uv, 0).r;
    float3 test = float3(sceneDepth, 0, 0);
    float3 sceneWorldPos = ComputeWorldSpacePosition(uv, sceneDepth);
    
    
    float rayDst = 0;

    Ray ray = CreateCameraRay(uv * 2 - 1);

    float distanceTraveled = 0;
    float3 samplePos = ray.origin + distanceTraveled * ray.direction;
    float v = getVoxel(samplePos);
    float3 col;
    float alpha = 1.0f;

    
    while (v == 0 && distanceTraveled < maxDst) {
        distanceTraveled += 0.4;
        samplePos = ray.origin + distanceTraveled * ray.direction;
        v = getVoxel(samplePos);
    }

    if (v)
    {
        distanceTraveled -= 0.4f;
        float thickness = 0.0f;

        col = _SmokeColor;
        float extinctionCoefficient = sigmaA + sigmaS;
        float stepSize = _StepSize;
        float lStepSize = _LightStepSize;;
        float accumDensity = 0.0f;


        int stepCount = 0;
        float sceneIntersectDistance = -((ray.origin - sceneWorldPos) / ray.direction).x;
        while ((stepCount < _StepCount) && distanceTraveled < sceneIntersectDistance) {
            samplePos = ray.origin + distanceTraveled * ray.direction;
            v = getDensity(samplePos);
            float sampleDensity = v;
            accumDensity += sampleDensity * _VolumeDensity;
            float3 lightDirection = normalize(_Light - samplePos);
            float p = GetPhase(ray.direction, lightDirection);

            ++stepCount;
            distanceTraveled += stepSize;
            thickness += stepSize * sampleDensity;
            alpha = exp(-thickness * accumDensity * extinctionCoefficient);
            if (v > 0.001f) {
                float tau = 0.0f;
                float3 lightPos = samplePos;
                int lStepCount = 0;
                while (lStepCount < _LightStepCount) {
                    tau += v * _ShadowDensity;
                    lightPos -= lStepSize * float3(0, -1, 0);
                    v = getDensity(lightPos);
                    lStepCount++;
                }

                float3 lightAttenuation = exp(-(tau / _ExtinctionColor) * extinctionCoefficient * _ShadowDensity);
                col += _LightColor * lightAttenuation * alpha * p * _ScatteringCoefficient * _VolumeDensity * sampleDensity;
            }
            if (alpha < _AlphaThreshold) break;
        }

        if (alpha < _AlphaThreshold) alpha = 0;
        float3 backgroundColor = Source[id.xy].rgb;
        col = alpha * backgroundColor + (1 - alpha) * col;
        
        Result[id.xy] = float4(saturate(col), 1.0f);
        _SmokeMaskTex[id.xy] = saturate(alpha);
    }
}
